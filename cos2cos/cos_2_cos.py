import click
import logging
from os import environ
from flask import Flask, request, abort
from cos import CloudObjectStorage, COSError
import json
import sys

accounts = environ.get('KEEP_ACCOUNTS')
if not accounts:
    logging.error('No valid KEEP_ACCOUNTS')
    sys.exit(1)
accounts = accounts.split(",")

def filter_on_account(record):
    account_id = record.get("account_id")
    if account_id in accounts:
        return True
    return False
    
class FileHandler():
    def __init__(self, src_cos_client, des_cos_client,source_bucket, destination_bucket, file):
        self.src_cos_client = src_cos_client
        self.des_cos_client = des_cos_client
        self.source_bucket = source_bucket
        self.destination_bucket = destination_bucket
        self.file = file

    def do(self):
        self.src_cos_client.get_file(
            bucket_name=self.source_bucket,
            file=self.file)

        logging.info('File downloaded')

        filtered = False
        with open(self.file, 'r') as ims_file:
            record = json.load(ims_file)
            data = record["data"]
            filtered_data = list(filter(filter_on_account, data))
            if len(data) != len(filtered_data):
                filtered = True
                record["data"] = filtered_data

        if filtered:
            with open(self.file, 'w') as file:
                file.write(json.dumps(record))
        
        if len(record["data"]) > 0:
            logging.info('Uploading file %s to COS bucket %s',
                        self.file, self.destination_bucket)

            self.des_cos_client.put_file(
                bucket_name=self.destination_bucket,
                file=self.file)

            logging.info('Upload complete')
        else:
             logging.info('Nothing to upload')


def create_server(src_cos_client=None, des_cos_client=None,destination_bucket=None, source_bucket=None):
    app = Flask(__name__)
    @app.route('/events/cos', methods=['POST'])
    def handle_cos_event():
        event = request.get_json(silent=True)
        if event:
            # We discard events not generated by our configured source bucket
            if event['bucket'] != source_bucket:
                abort(400)
            source_object = event['key']

            logging.info('Event received for file %s in bucket %s',
                         source_object, source_bucket)

            handler = FileHandler(src_cos_client=src_cos_client,
                                  des_cos_client=des_cos_client,
                                  source_bucket=source_bucket,
                                  destination_bucket=destination_bucket,
                                  file=source_object)

            try:
                handler.do()
            except COSError:
                pass
            return 'OK'
        else:
            abort(400)
    return app

def start_server(destination_bucket=None,
                 source_bucket=None,
                 src_cos_instance_id=None,
                 des_cos_instance_id=None,
                 src_cos_endpoint=None,
                 des_cos_endpoint=None,
                 iam_endpoint=None,
                 src_api_key=None,
                 des_api_key=None):
    """Demo app for processing files and moving between buckets."""

    logging.basicConfig(level=logging.INFO)
    # Get our config/arguments

    # TODO: Move to click-based environment var handling
    src_cos_endpoint = src_cos_endpoint if src_cos_endpoint else environ.get(
        'SRC_COS_ENDPOINT')
    if not src_cos_endpoint:
        logging.error('No valid COS endpoint specified')
        return -1
    

    des_cos_endpoint = des_cos_endpoint if des_cos_endpoint else environ.get(
        'DES_COS_ENDPOINT')
    if not des_cos_endpoint:
        logging.error('No valid COS endpoint specified')
        return -1

    src_api_key = src_api_key if src_api_key else environ.get('SRC_APIKEY')
    if not src_api_key:
        logging.error('No SRC IAM API key found')
        return -1

    des_api_key = des_api_key if des_api_key else environ.get('DESTINATION_APIKEY')
    if not des_api_key:
        logging.error('No DESTINAION IAM API key found')
        return -1
    

    destination_bucket = destination_bucket if destination_bucket else environ.get(
        'DESTINATION_BUCKET')
    if not destination_bucket:
        logging.error('Must specify a destination bucket')
        return -1

    source_bucket = source_bucket if source_bucket else environ.get(
        'SOURCE_BUCKET')
    if not source_bucket:
        logging.error('Must specify a source bucket')
        return -1

    src_cos_instance_id = src_cos_instance_id if src_cos_instance_id else environ.get(
        'SRC_COS_INSTANCE_ID')
    if not src_cos_instance_id:
        logging.error('No COS instance ID found')
        return -1

    des_cos_instance_id = des_cos_instance_id if des_cos_instance_id else environ.get(
        'DES_COS_INSTANCE_ID')
    if not des_cos_instance_id:
        logging.error('No COS instance ID found')
        return -1
    
    iam_endpoint = iam_endpoint if iam_endpoint else environ.get(
        'IAM_ENDPOINT', "https://iam.cloud.ibm.com/identity/token")
    if not iam_endpoint:
        logging.error('No IAM endpoint specified')
        return -1

    src_cos_client = CloudObjectStorage(
        api_key=src_api_key,
        instance_id=src_cos_instance_id,
        iam_endpoint=iam_endpoint,
        cos_endpoint=src_cos_endpoint)

    des_cos_client = CloudObjectStorage(
        api_key=des_api_key,
        instance_id=des_cos_instance_id,
        iam_endpoint=iam_endpoint,
        cos_endpoint=des_cos_endpoint)

    logging.info('Starting cos-2-cos server')
    server = create_server(src_cos_client,des_cos_client,
                           destination_bucket,
                           source_bucket)
    server.run(port=8000)

if __name__ == "__main__":
    exit(start_server())
